datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  OWNER
  MEMBER
}

enum FontSize {
  SMALL
  MEDIUM
  LARGE
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String?   // Hash de mot de passe (null si OAuth uniquement)
  name      String?
  darkMode  Boolean   @default(false)
  fontSize  FontSize  @default(MEDIUM)
  accounts  Account[] // Comptes OAuth liés
  memberships CollectionMembership[]
  articlesStatus ArticleStatus[]
  comments   Comment[]
  messages   Message[]
  ownedCollections Collection[] @relation("UserOwnedCollections")
  createdAt DateTime  @default(now())
}

model Account {
  id                Int    @id @default(autoincrement())
  provider          String
  providerAccountId String  // ID du profil dans le provider (par ex Google sub)
  user              User    @relation(fields: [userId], references: [id])
  userId            Int
  @@unique([provider, providerAccountId])
}

model Collection {
  id          Int       @id @default(autoincrement())
  name        String
  isShared    Boolean   @default(false)
  owner User? @relation("UserOwnedCollections", fields: [ownerId], references: [id])
  ownerId     Int?      // proprietaire initial de la collection
  memberships CollectionMembership[]
  collectionFeeds CollectionFeed[]
  comments    Comment[]
  messages    Message[]
  createdAt   DateTime  @default(now())
}

model CollectionMembership {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  role         Role
  @@unique([userId, collectionId])
}

model Feed {
  id             Int      @id @default(autoincrement())
  title          String
  url            String   @unique
  description    String?
  tags           String[] @default([])  // Tags/catégories associées au flux
  status         String   @default("active") // statut (ex: active/inactive)
  updateInterval Int      @default(60)       // Fréquence de mise à jour en minutes
  lastFetched    DateTime?
  articles       Article[]
  collectionFeeds CollectionFeed[]
  createdAt      DateTime @default(now())
}

model CollectionFeed {
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  feed         Feed       @relation(fields: [feedId], references: [id])
  feedId       Int
  @@id([collectionId, feedId])
}

model Article {
  id        Int      @id @default(autoincrement())
  feed      Feed     @relation(fields: [feedId], references: [id])
  feedId    Int
  title     String
  link      String
  guid      String?  // identifiant unique du flux (GUID) si disponible
  author    String?
  content   String?  // contenu ou extrait de l'article
  published DateTime
  comments  Comment[]
  status    ArticleStatus[]
  @@unique([feedId, guid])
}

model ArticleStatus {
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  article     Article @relation(fields: [articleId], references: [id])
  articleId   Int
  isRead      Boolean @default(false)
  isFavorite  Boolean @default(false)
  // Composite primary key pour (user, article)
  @@id([userId, articleId])
}

model Comment {
  id           Int        @id @default(autoincrement())
  content      String
  article      Article    @relation(fields: [articleId], references: [id])
  articleId    Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  author       User       @relation(fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime   @default(now())
}

model Message {
  id           Int        @id @default(autoincrement())
  content      String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  author       User       @relation(fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime   @default(now())
}
